import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'chating_s.dart';

class ChatHomeScreen extends StatefulWidget {
  const ChatHomeScreen({super.key});

  @override
  ChatHomeScreenState createState() => ChatHomeScreenState();
}

class ChatHomeScreenState extends State<ChatHomeScreen> {
  final TextEditingController _searchController = TextEditingController();
  final String currentUserId = FirebaseAuth.instance.currentUser?.uid ?? '';

  List<Map<String, dynamic>> previousChats = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadPreviousChats();
  }

  Future<void> _loadPreviousChats() async {
    try {
      FirebaseFirestore.instance
          .collection('chat')
          .where('user', arrayContains: currentUserId)
          .snapshots()
          .listen((chatSnapshots) async {
        List<Map<String, dynamic>> chatList = [];

        for (var chatDoc in chatSnapshots.docs) {
          final chatData = chatDoc.data();
          final userIds = chatData['user'] as List<dynamic>;

          // Find the other user's ID
          final otherUserId = userIds.firstWhere((id) => id != currentUserId);

          // Fetch other user details
          final userSnapshot = await FirebaseFirestore.instance
              .collection('user')
              .doc(otherUserId)
              .get();

          if (userSnapshot.exists) {
            final userData = userSnapshot.data();
            chatList.add({
              'userId': otherUserId,
              'username': userData?['username'] ?? 'Unknown User',
              'userimage':
                  userData?['userimage'] ?? 'https://via.placeholder.com/150',
              'latestMessage': chatData['latestMessage'] ?? 'No messages yet',
            });
          }
        }

        setState(() {
          previousChats = chatList;
          isLoading = false;
        });
      });
    } catch (error) {
      setState(() {
        isLoading = false;
      });
      print("Error loading chats: $error");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: isLoading
          ? const Center(
              child: CircularProgressIndicator(),
            )
          : Column(
              children: [
                // Search bar
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: TextField(
                    controller: _searchController,
                    decoration: const InputDecoration(
                      hintText: 'Search',
                      prefixIcon: Icon(Icons.search),
                    ),
                    onChanged: (value) => setState(() {}),
                  ),
                ),
                // Chats list
                Expanded(
                  child: ListView.builder(
                    itemCount: previousChats.length,
                    itemBuilder: (context, index) {
                      final chat = previousChats[index];

                      // Filter chats by search query
                      if (_searchController.text.isNotEmpty &&
                          !chat['username']
                              .toLowerCase()
                              .contains(_searchController.text.toLowerCase())) {
                        return Container();
                      }

                      return ListTile(
                        leading: CircleAvatar(
                          backgroundImage: NetworkImage(chat['userimage']),
                        ),
                        title: Text(chat['username']),
                        subtitle: Text(
                          chat['latestMessage'],
                          overflow: TextOverflow.ellipsis,
                        ),
                        onTap: () => Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (_) => ChatScreen(
                              currentUserId: currentUserId,
                              chatUserId: chat['userId'],
                            ),
                          ),
                        ),
                      );
                    },
                  ),
                ),
              ],
            ),
    );
  }
}


































import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class ChatScreen extends StatefulWidget {
  final String currentUserId;
  final String chatUserId;

  const ChatScreen({
    required this.currentUserId,
    required this.chatUserId,
    Key? key,
  }) : super(key: key);

  @override
  ChatScreenState createState() => ChatScreenState();
}

class ChatScreenState extends State<ChatScreen> {
  final TextEditingController _messageController = TextEditingController();
  late String chatRoomId;
  bool isLoading =
      true; // Add a loading state to track chatRoomId initialization

  @override
  void initState() {
    super.initState();
    _initializeChatRoom();
  }

  Future<void> _initializeChatRoom() async {
    chatRoomId = await _getOrCreateChatRoomId();
    setState(() {
      isLoading =
          false; // Set loading to false once the chatRoomId is initialized
    });
  }

  Future<String> _getOrCreateChatRoomId() async {
    final chatRooms = FirebaseFirestore.instance.collection('chat');

    final chatQuery = await chatRooms
        .where('user', arrayContains: widget.currentUserId)
        .get();

    for (var chatDoc in chatQuery.docs) {
      if ((chatDoc['user'] as List).contains(widget.chatUserId)) {
        return chatDoc.id;
      }
    }

    final newChatRoom = await chatRooms.add({
      'user': [widget.currentUserId, widget.chatUserId],
      'createdAt': FieldValue.serverTimestamp(),
      'latestMessage': '',
    });
    return newChatRoom.id;
  }

  void _sendMessage() {
    if (_messageController.text.isEmpty) return;

    FirebaseFirestore.instance.collection('chat/$chatRoomId/messages').add({
      'senderId': widget.currentUserId,
      'text': _messageController.text,
      'createdAt': FieldValue.serverTimestamp(),
    });

    FirebaseFirestore.instance
        .collection('chat')
        .doc(chatRoomId)
        .update({'latestMessage': _messageController.text});

    _messageController.clear();
  }

  @override
  Widget build(BuildContext context) {
    if (isLoading) {
      return const Center(child: CircularProgressIndicator());
    }

    return Scaffold(
      appBar: AppBar(
        title: const Text('Chat'),
      ),
      body: Column(
        children: [
          Expanded(
            child: StreamBuilder<QuerySnapshot>(
              stream: FirebaseFirestore.instance
                  .collection('chat/$chatRoomId/messages')
                  .orderBy('createdAt', descending: true)
                  .snapshots(),
              builder: (context, snapshot) {
                if (!snapshot.hasData) {
                  return const Center(child: CircularProgressIndicator());
                }

                final messages = snapshot.data!.docs;
                return ListView.builder(
                  reverse: true,
                  itemCount: messages.length,
                  itemBuilder: (context, index) {
                    final message = messages[index];
                    final isMine = message['senderId'] == widget.currentUserId;
                    return Align(
                      alignment:
                          isMine ? Alignment.centerRight : Alignment.centerLeft,
                      child: Container(
                        padding: const EdgeInsets.all(10),
                        margin: const EdgeInsets.symmetric(vertical: 5),
                        decoration: BoxDecoration(
                          color: isMine ? Colors.blue : Colors.grey[300],
                          borderRadius: BorderRadius.circular(10),
                        ),
                        child: Text(message['text']),
                      ),
                    );
                  },
                );
              },
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _messageController,
                    decoration: const InputDecoration(
                      hintText: 'Type a message',
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
                IconButton(
                  icon: const Icon(Icons.send),
                  onPressed: _sendMessage,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
