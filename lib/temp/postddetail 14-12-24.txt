import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_rating_bar/flutter_rating_bar.dart';

import '../../userDetailsScreen/user_details_screen.dart';

class PostDetailScreen extends StatefulWidget {
  final String postId;
  final String userId;

  const PostDetailScreen({
    Key? key,
    required this.postId,
    required this.userId,
  }) : super(key: key);

  @override
  State<PostDetailScreen> createState() => _PostDetailScreenState();
}

class _PostDetailScreenState extends State<PostDetailScreen> {
  // Fetch user details from Firestore
  Future<Map<String, dynamic>> fetchUserDetails(String userId) async {
    final userDoc =
        await FirebaseFirestore.instance.collection('user').doc(userId).get();
    if (userDoc.exists) {
      return userDoc.data()!;
    } else {
      throw Exception('User not found');
    }
  }

  // Fetch post details from Firestore
  Future<Map<String, dynamic>> fetchPostDetails(String postId) async {
    final postDoc =
        await FirebaseFirestore.instance.collection('post').doc(postId).get();
    if (postDoc.exists) {
      return postDoc.data()!;
    } else {
      throw Exception('Post not found');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Post Details')),
      body: FutureBuilder(
        future: Future.wait([
          fetchUserDetails(widget.userId), // Fetch user details
          fetchPostDetails(widget.postId), // Fetch post details
        ]),
        builder: (context, AsyncSnapshot<List<dynamic>> snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          } else if (snapshot.hasData) {
            int currentIndex = 0;
            final userData = snapshot.data![0] as Map<String, dynamic>;
            final postData = snapshot.data![1] as Map<String, dynamic>;
            final username = userData['username'];
            final userimage = userData['userimage'] ??
                [
                  'https://res.cloudinary.com/dakew8wni/image/upload/v1733819145/public/userImage/fvv6lbzdjhyrc1fhemaj.jpg'
                ];
            final gender = userData['gender'];

            final locationDescription =
                postData['locationDescription'] ?? 'unKnown';
            final locationName = postData['locationName'] ?? 'unKnown';
            final tripDuration = postData['tripDuration'] ?? 0;
            final isTripCompleted = postData['tripCompleted'];
            final tripRating = (postData['tripRating'] ?? 0).toDouble();

            final tripFeedback = postData['tripFeedback'];
            final tripBuddies = postData['tripBuddies'] ?? ['user1', 'user2'];
            final locationImages = postData['locationImages'] ??
                [
                  'https://res.cloudinary.com/dakew8wni/image/upload/v1734019072/public/postimages/mwtjtugc4ppu02vwiv49.png'
                ];
            final visitedPalaces = postData['visitedPlaces'] ?? [];
            final planToVisitPlaces = postData['planToVisitPlaces'];

            return Padding(
              padding: const EdgeInsets.all(8.0),
              child: SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // User info section
                    Row(
                      children: [
                        GestureDetector(
                          onTap: () {
                            // Navigate to the UsersProfilePage when the image is tapped
                          },
                          child: CircleAvatar(
                            radius: 30.0,
                            backgroundImage: NetworkImage(userimage),
                          ),
                        ),
                        SizedBox(width: 10.0),
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              username, // Display full name
                              style: TextStyle(
                                  fontSize: 18.0, fontWeight: FontWeight.bold),
                            ),
                            Text('Gender: $gender'), // Display gender
                            // Optionally, you can add a display for the user's DOB here as well
                          ],
                        ),
                      ],
                    ),

                    SizedBox(height: 16.0),

                    Stack(
                      children: [
                        // Display image based on the current index with rounded corners
                        Container(
                          height: 250.0,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(
                                15.0), // Adjust the radius as needed
                          ),
                          child: ClipRRect(
                            borderRadius: BorderRadius.circular(
                                15.0), // Apply border radius to the image
                            child: Image.network(
                              locationImages[
                                  currentIndex], // Use currentIndex to load the correct image
                              fit: BoxFit.cover,
                              width: double.infinity,
                            ),
                          ),
                        ),
                        if (currentIndex >
                            0) 
                          Positioned(
                            left: 10.0,
                            top: 90.0,
                            child: GestureDetector(
                              onTap: () {
                                if (currentIndex > 0) {
                                  locationImages[currentIndex] =
                                      locationImages[currentIndex - 1];
                                }
                              },
                              child: Container(
                                padding: EdgeInsets.all(8.0),
                                decoration: BoxDecoration(
                                  color: const Color.fromARGB(255, 0, 0, 0)
                                      .withOpacity(
                                          0.3), // Transparent black background
                                  shape: BoxShape.circle, // Rounded shape
                                ),
                                child: Icon(Icons.arrow_left,
                                    color: Colors.white, size: 30),
                              ),
                            ),
                          ),

                        // Right Arrow Button
                        if (currentIndex <
                            locationImages.length -
                                1) // Only show right arrow if not at the last image
                          Positioned(
                            right: 10.0,
                            top: 90.0,
                            child: GestureDetector(
                              onTap: () {
                                setState(() {
                                  if (currentIndex <
                                      locationImages.length - 1) {
                                    locationImages[currentIndex] =
                                        locationImages[currentIndex + 1];
                                  }
                                  print(
                                      "Current index after right arrow: $currentIndex");
                                });
                              },
                              child: Container(
                                padding: EdgeInsets.all(8.0),
                                decoration: BoxDecoration(
                                  color: const Color.fromARGB(255, 0, 0, 0)
                                      .withOpacity(
                                          0.3), // Transparent black background
                                  shape: BoxShape.circle, // Rounded shape
                                ),
                                child: Icon(Icons.arrow_right,
                                    color: Colors.white, size: 30),
                              ),
                            ),
                          ),
                      ],
                    ),

                    SizedBox(height: 16.0),

                    // Post details
                    Row(
                      mainAxisAlignment: MainAxisAlignment
                          .center, // Centers content horizontally
                      crossAxisAlignment: CrossAxisAlignment
                          .center, // Centers content vertically (if needed)
                      children: [
                        Column(
                          mainAxisAlignment: MainAxisAlignment
                              .center, // Centers content vertically in the column
                          crossAxisAlignment: CrossAxisAlignment
                              .center, // Centers content horizontally in the column
                          children: [
                            Text(
                              'Trip to $locationName ',
                              style: TextStyle(
                                fontSize: 13,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            SizedBox(height: 8.0),
                            // Container ensures wrapping and centers content
                            Container(
                              width: MediaQuery.of(context).size.width *
                                  0.8, // Limit width for wrapping
                              child: Text(
                                locationDescription,
                                textAlign: TextAlign
                                    .center, // Ensures the text is centered horizontally
                                softWrap:
                                    true, // Wrap the text to next line if it overflows
                                maxLines: 3, // Limit the number of lines
                                overflow: TextOverflow
                                    .ellipsis, // Show ellipsis if text overflows
                                style: TextStyle(
                                  fontSize: 10,
                                ),
                              ),
                            ),
                            SizedBox(height: 10.0),
                          ],
                        ),
                      ],
                    ),
                    Divider(
                      color: Colors.black, // Color of the line
                      thickness: 2.0, // Thickness of the line
                      indent: 20.0, // Space before the line
                      endIndent: 20.0, // Space after the line
                    ),
                    SizedBox(height: 10.0),
                    if (!isTripCompleted) ...[
                      Center(
                        child: Text(
                          'Trip Duration Plan : $tripDuration days',
                          style: TextStyle(
                              fontSize: 16, fontWeight: FontWeight.bold),
                        ),
                      ),
                      SizedBox(height: 8.0),
                      if (planToVisitPlaces.isNotEmpty) ...[
                        Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              const Center(
                                child: Text(
                                  'Visiting Places Plan',
                                  style: TextStyle(
                                    fontSize: 16,
                                    fontWeight: FontWeight.bold,
                                    color: Color.fromARGB(255, 255, 200, 118),
                                  ),
                                ),
                              ),
                              const SizedBox(height: 8.0),
                              LayoutBuilder(
                                builder: (context, constraints) {
                                  // Calculate the number of columns based on available width
                                  final crossAxisCount =
                                      (constraints.maxWidth / 100)
                                          .floor(); // Adjust 100 for cell width
                                  return GridView.builder(
                                    shrinkWrap: true,
                                    physics:
                                        const NeverScrollableScrollPhysics(),
                                    gridDelegate:
                                        SliverGridDelegateWithFixedCrossAxisCount(
                                      crossAxisCount: crossAxisCount > 0
                                          ? crossAxisCount
                                          : 1,
                                      crossAxisSpacing: 8.0,
                                      mainAxisSpacing: 8.0,
                                      childAspectRatio:
                                          2, // Adjust to decrease cell height
                                    ),
                                    itemCount: planToVisitPlaces.length,
                                    itemBuilder: (context, index) {
                                      return Container(
                                        padding: const EdgeInsets.all(8.0),
                                        decoration: BoxDecoration(
                                          color: const Color.fromARGB(
                                              255, 244, 255, 215),
                                          border:
                                              Border.all(color: Colors.grey),
                                          borderRadius:
                                              BorderRadius.circular(8.0),
                                        ),
                                        child: Center(
                                          child: Text(
                                            planToVisitPlaces[index],
                                            style: const TextStyle(
                                              fontSize: 10,
                                              fontWeight: FontWeight.bold,
                                            ),
                                            textAlign: TextAlign
                                                .center, // Optional for multiline text
                                          ),
                                        ),
                                      );
                                    },
                                  );
                                },
                              ),
                            ],
                          ),
                        ),
                      ],
                      SizedBox(height: 8.0),
                    ],

                    // Trip completion details
                    if (isTripCompleted) ...[
                      Container(
                        width: double
                            .infinity, // Makes the container take up full width
                        padding: EdgeInsets.all(8.0),
                        decoration: BoxDecoration(
                          color: Colors.green[100],
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(
                            color: Colors.green,
                            width: 2,
                          ),
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment
                              .center, // Center align all children horizontally
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Text(
                              'Trip Completed',
                              style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.green),
                            ),
                            SizedBox(height: 8.0),
                            if (tripBuddies.isNotEmpty) ...[
                              GridView.builder(
                                shrinkWrap: true,
                                gridDelegate:
                                    SliverGridDelegateWithFixedCrossAxisCount(
                                  crossAxisCount: 3, // Two items in each row
                                  crossAxisSpacing: 10.0,
                                  mainAxisSpacing: 10.0,
                                ),
                                itemCount: tripBuddies.length,
                                itemBuilder: (context, index) {
                                  final buddyUserId = tripBuddies[index];
                                  return FutureBuilder<Map<String, dynamic>>(
                                    future: fetchUserDetails(buddyUserId),
                                    builder: (context, snapshot) {
                                      if (snapshot.hasData) {
                                        final buddy = snapshot.data!;
                                        String gender =
                                            buddy['gender'].toLowerCase();

                                        // Determine grid background color based on gender
                                        Color gridColor;
                                        switch (gender) {
                                          case 'male':
                                            gridColor = const Color.fromARGB(
                                                255,
                                                186,
                                                224,
                                                255); // Blue for male
                                            break;
                                          case 'female':
                                            gridColor = const Color.fromARGB(
                                                255,
                                                255,
                                                224,
                                                252); // Rose (pink) for female
                                            break;
                                          default:
                                            gridColor = const Color.fromARGB(
                                                255,
                                                255,
                                                253,
                                                237); // Yellow for other or unknown genders
                                            break;
                                        }

                                        return GestureDetector(
                                          onTap: () {
                                            Navigator.push(
                                              context,
                                              MaterialPageRoute(
                                                builder: (context) =>
                                                    UsersProfilePage(
                                                  username: buddy['username'],
                                                ),
                                              ),
                                            );
                                          },
                                          child: Card(
                                            elevation: 5.0,
                                            shape: RoundedRectangleBorder(
                                              borderRadius:
                                                  BorderRadius.circular(10.0),
                                            ),
                                            color:
                                                gridColor, // Set grid background color based on gender
                                            child: Column(
                                              children: [
                                                SizedBox(
                                                    height:
                                                        20.0), // Add top padding to create space between image and grid
                                                CircleAvatar(
                                                  radius: 25.0,
                                                  backgroundImage: NetworkImage(
                                                      buddy['userimage']),
                                                ),
                                                SizedBox(width: 10.0),
                                                Expanded(
                                                  child: Text(
                                                    buddy['username'],
                                                    style:
                                                        TextStyle(fontSize: 10),
                                                    overflow:
                                                        TextOverflow.ellipsis,
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ),
                                        );
                                        // ... rest of the code ...
                                      } else if (snapshot.hasError) {
                                        return Center(
                                            child: Text(
                                                'Error: ${snapshot.error}'));
                                      }
                                      return const SizedBox(); // Return a placeholder widget while loading
                                    },
                                  );
                                },
                              )
                            ],
                            SizedBox(height: 15.0),
                            if (visitedPalaces.isNotEmpty)
                              Padding(
                                padding: const EdgeInsets.all(8.0),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    const Center(
                                      child: Text(
                                        'Visited Places',
                                        style: TextStyle(
                                          fontSize: 16,
                                          fontWeight: FontWeight.bold,
                                          color:
                                              Color.fromARGB(255, 255, 104, 16),
                                        ),
                                      ),
                                    ),
                                    const SizedBox(height: 8.0),
                                    LayoutBuilder(
                                      builder: (context, constraints) {
                                        // Calculate the number of columns based on available width
                                        final crossAxisCount = (constraints
                                                    .maxWidth /
                                                100)
                                            .floor(); // Adjust 100 for cell width
                                        return GridView.builder(
                                          shrinkWrap: true,
                                          physics:
                                              const NeverScrollableScrollPhysics(),
                                          gridDelegate:
                                              SliverGridDelegateWithFixedCrossAxisCount(
                                            crossAxisCount: crossAxisCount > 0
                                                ? crossAxisCount
                                                : 1,
                                            crossAxisSpacing: 8.0,
                                            mainAxisSpacing: 8.0,
                                            childAspectRatio:
                                                2, // Adjust to decrease cell height
                                          ),
                                          itemCount: visitedPalaces.length,
                                          itemBuilder: (context, index) {
                                            return Container(
                                              padding:
                                                  const EdgeInsets.all(8.0),
                                              decoration: BoxDecoration(
                                                color: const Color.fromARGB(
                                                    255, 179, 255, 251),
                                                border: Border.all(
                                                    color: Colors.grey),
                                                borderRadius:
                                                    BorderRadius.circular(8.0),
                                              ),
                                              child: Center(
                                                // Center aligns the text in the middle
                                                child: Text(
                                                  visitedPalaces[index],
                                                  style: const TextStyle(
                                                    fontSize: 10,
                                                    fontWeight: FontWeight.bold,
                                                  ),
                                                  textAlign: TextAlign
                                                      .center, // Optional for multiline text
                                                ),
                                              ),
                                            );
                                          },
                                        );
                                      },
                                    ),
                                  ],
                                ),
                              ),
                            SizedBox(height: 8.0),
                            if (tripRating != null)
                              RatingBar.builder(
                                initialRating: tripRating,
                                minRating: 0,
                                itemSize: 20,
                                direction: Axis.horizontal,
                                allowHalfRating: true,
                                itemCount: 5,
                                itemBuilder: (context, _) => const Icon(
                                  Icons.star,
                                  color: Colors.yellow,
                                ),
                                onRatingUpdate: (rating) {
                                  print(rating);
                                },
                              ),
                            SizedBox(height: 20.0),
                            if (tripFeedback != null)
                              Text(
                                'Feedback : $tripFeedback',
                                style: TextStyle(fontSize: 16),
                              ),
                            SizedBox(height: 8.0),
                          ],
                        ),
                      ),
                    ],
                  ],
                ),
              ),
            );
          } else {
            return Center(child: Text('No data found.'));
          }
        },
      ),
    );
  }
}

class UserProfileScreen extends StatelessWidget {
  final String username;

  const UserProfileScreen({Key? key, required this.username}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('User Profile')),
      body: Center(child: Text('Profile of $username')),
    );
  }
}
